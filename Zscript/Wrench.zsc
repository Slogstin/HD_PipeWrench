//---------------------------------------------
// A pipe wrench, based on Potetobloke's Combat Knife.	-Slogstin
//---------------------------------------------

class HDWrenchPuff:HDBulletPuff{
	default{
		stamina 5;scale 0.6;
		hdbulletpuff.scarechance 5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		if(!random(0,scarechance)){
			actor fff=spawn("idledummy",pos,ALLOW_REPLACE);
			fff.stamina=random(60,120);
			hdmobai.frighten(fff,256);
		}
		A_StartSound("misc/bullethit",0,0,1*stamina*stamina);
		A_StartSound("Wrench/Wall",CHAN_7,0,0.5*stamina*stamina);
		A_ChangeVelocity(-0.4,0,frandom(0.1,0.4),CVF_RELATIVE);
		trymove(pos.xy+vel.xy,false);
		int stm=stamina;
		// this doesn't actually do anything
		//fadeafter=frandom(0,1);
		scale*=frandom(0.9,1.1);
		for(int i=0;i<stamina;i++){
			A_SpawnParticle("gray",
				SPF_RELATIVE,70,frandom(4,20)*getdefaultbytype((class<actor>)(missilename)).scale.x,0,
				frandom(-3,3),frandom(-3,3),frandom(0,4),
				frandom(-0.4,0.4)*stm,frandom(-0.4,0.4)*stm,frandom(0.4,1.2)*stm,
				frandom(-0.1,0.1),frandom(-0.1,0.1),-1.
			);

//			actor ch=spawn(missilename,self.pos,ALLOW_REPLACE);
//			ch.vel=self.vel+(random(-stm,stm),random(-stm,stm),random(-2,12));
		}
	}
}


const HDLD_WRENCH="PWR";

class HDPipeWrench:HDWrenchWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	
		double initangleto;
	double inittangle;
	double inittz;
	vector3 initpos;
	vector3 initvel;
	
	default{
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+hdweapon.fitsinbackpack
		//-hdweapon.dontnull
		-weapon.cheatnotweapon
		-nointeraction
		-inventory.untossable
		+forcepain
		+forceXYbillboard
		+rollsprite
		+rollcenter
		+nodamagethrust
		radius 6;height 4;
		inventory.pickupmessage "You got the Pipe Wrench! Let them see stars!";
		hdweapon.barrelsize 1,1,1;
		obituary "%k fixed %o's plumbing.";
		attacksound "*fist";
		weapon.selectionorder 100;
		weapon.kickback 15;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		weapon.slotpriority 2.1;
		scale 0.45;
		//+FLATSPRITE
		DamageFunction (random(30,40));
		tag "Pipe Wrench";
		hdweapon.refid HDLD_WRENCH;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse);}
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDPipeWrench(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Swing\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_UNLOAD.."   Throw\n"
		//..WEPHELP_UNLOAD.."   Distracting projectile\n"
		;
	}
	
	override string,double getpickupsprite(){return "WRNPA0",0.65;}
	
	override double weaponbulk(){
		return 60;
	}
	override double gunmass(){
		return 9;
	}
	
	action void A_Lunge(){
		hdplayerpawn hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30){setweaponstate("hold");return;}
			else hdp.fatigue+=5;
		}
		A_Recoil(min(hdp.overloaded*0.6,4.)-4.);
	}
	
	//for throwing a weapon
	override inventory CreateTossable(int amt){
		let onr=hdplayerpawn(owner);
		bool throw=(
			onr
			&&onr.player
			&&onr.player.cmd.buttons&BT_ZOOM
		);
		bool isreadyweapon=onr&&onr.player&&onr.player.readyweapon==self;
		if(!isreadyweapon)throw=false;
		let thrown=super.createtossable(amt);
		if(!thrown)return null;
		let newwep=GetSpareWeapon(onr,doselect:isreadyweapon);
		hdweapon(thrown).bjustchucked=true;
		thrown.target=onr;
		thrown.lastenemy=onr;
		if(throw){
			thrown.bmissile=true;
			thrown.bBOUNCEONWALLS=true;
			thrown.bBOUNCEONFLOORS=true;
			thrown.bALLOWBOUNCEONACTORS=true;
			thrown.bBOUNCEAUTOOFF=true;
		}else{
			thrown.bmissile=false;
			thrown.bBOUNCEONWALLS=false;
			thrown.bBOUNCEONFLOORS=false;
			thrown.bALLOWBOUNCEONACTORS=false;
			thrown.bBOUNCEAUTOOFF=false;
		}
		return thrown;
	}
	double throwvel;
	override void OnDrop(Actor dropper){
		if(bjustchucked&&target){
			double cp=cos(target.pitch);
			if(bmissile){
				vel=target.vel+
					(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))
					*min(20,800/weaponbulk())
					*(hdplayerpawn(target)?hdplayerpawn(target).strength:1.)
				;
			}else vel=target.vel+(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))*4;
			throwvel=vel dot vel;
			bjustchucked=false;
		}

		//copypasted from HDPickup
		if(dropper){
			setz(dropper.pos.z+dropper.height*0.8);
			if(!bmissile){
				double dp=max(dropper.pitch-6,-90);
				vel=dropper.vel+(
					cos(dp)*(cos(dropper.angle),sin(dropper.angle)),
					-sin(dp)
				)*3;
			}
			HDBackpack.ForceUpdate(dropper);
		}
	}

	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	
		action void HDWrenchHit(double dmg, int pb_angle=0, int pb_rotation=0,
							int pb_pitch=0,class<Actor> pb_pufftype=""){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle+pb_angle,60,pitch+pb_pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		
		//actual puff effect if the shot connects
				LineAttack(angle,60,pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")>PBZERK_COOLOFF?"HDWrenchPuff":"HDWrenchPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
			
		);
			
		
		//setweaponstate("IGOTEM",5);

/*		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}*/
		actor punchee=punchline.hitactor;
		
		if(!punchee){
			HDF.Give(self,"WallChunkAmmo",1);
			if(punchline.hitline)doordestroyer.CheckDirtyWindowBreak(punchline.hitline,dmg*0.2,punchline.hitlocation);
			return;
		}

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else{
			double twe=0;
			if(!!punchee)twe=HDMath.TowardsEachOther(self,punchee);
			else twe=(punchline.hitlocation-pos).length()-(punchline.hitlocation-(pos+vel)).length();
			dmg+=twe*3;
		}

		//come in swinging
		let onr=hdplayerpawn(self);
		double ptch=0.;
		double pyaw=0.;
		if(onr){
			ptch=deltaangle(onr.lastpitch,onr.pitch)*0.1;
			pyaw=deltaangle(onr.lastangle,onr.angle)*1.5;
			double iy=abs(pyaw);

			if(player.onground)dmg+=min(abs(iy)*5,dmg*3);
		}

		//shit happens
		//dmg*=frandom(0.85,1.5);
//		HDBleedingWound.inflict(punchee,int(dmg*frandom(0.85,1.5)),8);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		
		let hdmp=hdmobbase(punchee);

		//headshot lol
		if(
			!punchee.bnopain
			&&punchee.health>0
			&&(
				!hdmp
				||!hdmp.bheadless
			)
			&&punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			hdmobbase.forcepain(punchee);
			dmg*=frandom(2.3,2.6);
			if(hdmp)hdmp.stunned+=(185);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Hit %s for %i damage!",pch,dmg));
		}
		
		
		//hit sound
		if(punchee.bnoblood)
		{
		if(dmg*2>punchee.health)punchee.A_StartSound("Wrench/Wall",CHAN_BODY,0,1.25);
		}
		else 
		{
		punchee.A_StartSound("Wrench/flesh",CHAN_BODY,0,0.5);
		if(dmg*2>punchee.health)punchee.A_StartSound("Wrench/flesh",CHAN_7,0,1);
		//if(dmg*2>punchee.health)punchee.A_StartSound("weapons/kharonsplat",CHAN_6,0,1);
		}
		
		hdmobbase.forcepain(punchee);
		punchee.InStateSequence(curstate,resolvestate("falldown"));
		//punchee.InStateSequence(curstate,resolvestate("falldown"));
		
		if(punchee.health>0)punchee.damagemobj(self,self,int(dmg),"SmallArms3");
//		else punchee.damagemobj(self,self,int(dmg*0.6),"SmallArms3");
		
		LineAttack(angle,60,pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			pb_pufftype,
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}

	states{
	
/*	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_WeaponBusy();
			A_SetCrosshair(21);
			A_SetHelpText();
			
			invoker.weaponstatus[FRAGS_FORCE]=0;

			return resolvestate("select0");
		}*/
	select0:
		WRNH A 0;
		goto select0small;
	deselect:
		TNT1 A 0 A_StartDeselect();
	deselect0:
		WRNH A 0;
		goto deselect0small;
		
	ready:
		WRNH A 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	fire:	
	firehold:
	swingstart:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswingstart");
//		WRNH A 0 A_StartSound("weapons/pocket",CHAN_6);
		WRNS ABCD 2;
		#### # 0 A_WeaponBusy;
		goto holdswing;
	zerkswingstart:
//		WRNH A 0 A_StartSound("weapons/pocket",CHAN_6);
		WRNS ABCD 1;
		#### # 0 A_WeaponBusy;
		goto holdswing;
	holdswing:
		WRNS D 1; //A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		#### # 0 A_JumpIf(pressingreload(),"SwingWithdraw");
		TNT1 A 0 A_ReFire("holdswing");
	goto swingwind;
	
	swingreturn:
		TNT1 A 3;
		TNT1 A 2;
	goto holdswing;
	
	swingwind:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswingwind");
		TNT1 A 0 A_StartSound("weapons/pocket",CHAN_6);
		WRNS EFGH 1;
		TNT1 A 4 ;
	swinghard:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswinghard");
		WRNS IJK 1;
		#### A 0 A_Overlay(5,"hitcheckvertical",false);
		#### A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			A_StartSound("Wrench/Swing",CHAN_7);
		}
		WRNS LMN 1;
		TNT1 A 4;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 AAAAAA 1 A_JumpIf(pressingaltfire(),"swingverti");
		#### A 0 A_JumpIf(pressingfire(),"swingbackhard");
//		#### A 0 A_JumpIf(pressingaltfire(),"HoriSwingHard");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		goto recoverswing;
		
	swingbackhard:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswingbackhard");
		TNT1 A 6;
		WRNB ABC 1;
		#### A 0 A_Overlay(5,"hitcheckvertical",false);
		#### A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			A_StartSound("Wrench/Swing",CHAN_7);
		}
		WRNB DEF 1;
		TNT1 A 10;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 AAAAAA 1 A_JumpIf(pressingaltfire(),"swingverti");
		#### A 0 A_JumpIf(pressingfire(),"swinghard");
//		#### A 0 A_JumpIf(pressingaltfire(),"HoriSwingHard");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		goto recoverswing;
		
	recoverswing:
		WRNH DCBA 2;
		#### A 0 A_JumpIf(pressingaltfire(),"nope");
		#### A 0 A_JumpIf(pressingfiremode(),"nope");
		#### A 0 A_JumpIf(pressingfire(),"swingstart");
		goto ready;
		
	SwingWithdraw:
		WRNS DCBA 2;
		WRNH A 2;
		goto nope;
	
	zerkswingwind:
		TNT1 A 0 A_StartSound("weapons/pocket",CHAN_6);
		WRNS EFGH 1;
		TNT1 A 2 ;
	zerkswinghard:
		WRNS IJK 1;
		#### A 0 A_Overlay(5,"hitcheckzerkvertical",false);
		#### A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			A_StartSound("Wrench/Swing",CHAN_7);
		}
		WRNS LMN 1;
		TNT1 A 2;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 AAAAAA 1 A_JumpIf(pressingaltfire(),"swingverti");
		#### A 0 A_JumpIf(pressingfire(),"zerkswingbackhard");
//		#### A 0 A_JumpIf(pressingaltfire(),"HoriSwingHard");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		goto recoverswing;
		
	zerkswingbackhard:
		TNT1 A 3;
		WRNB ABC 1;
		#### A 0 A_Overlay(5,"hitcheckzerkvertical",false);
		#### A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=1;
			A_StartSound("Wrench/Swing",CHAN_7);
		}
		WRNB DEF 1;
		TNT1 A 2;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
//		TNT1 AAAAAA 1 A_JumpIf(pressingaltfire(),"swingverti");
		#### A 0 A_JumpIf(pressingfire(),"zerkswinghard");
//		#### A 0 A_JumpIf(pressingaltfire(),"HoriSwingHard");
//		TNT1 A 0 A_ReFire("startfire");
		TNT1 A 0 A_WeaponBusy;
		TNT1 A 3;
		goto recoverswing;
		
	reload:
		goto nope;
		
	altfire:
	lungecheck:
		#### # 1 A_CheckFloor("lunge");
		goto nope;
	lunge:
		#### # 0 A_Lunge();
		#### # 1{
			if(countinv("HDZerk")>PBZERK_COOLOFF)A_Recoil(-random(12,24));
		}
		#### # 1 A_Recoil(-8);
		WRNS ABCD 2;
		#### # 0  A_JumpIf(pressingfire(),"swingwind");
	goto SwingWithdraw;
	
	hitcheckvertical:
		TNT1 A 1
		{
//		HDChop(18,0,0,0);
		HDWrenchHit(22);
//		HDChop(18,0,0,0);
		}
	stop;
	
	hitcheckzerkvertical:
		TNT1 A 1 HDWrenchHit(invoker.flicked?340:300);
	stop;

	firemode:
	goto nope;
	
	unload:
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;

	spawn:
		WRNP A 1;
		loop;
	}
}